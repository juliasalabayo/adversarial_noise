[tool.poetry]
name = "adversarial_noise"
version = "0.1.0"
description = ""
authors = ["Julia Sala-Bayo <jsalabayo@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "~3.12"
numpy = "^1.26.4"
pandas = "^2.2.2"
nbconvert = "^7.16.4"
torch = "^2.5.1"
torchvision = "^0.20.1"
pytest = "^8.3.4"
scikit-learn = "^1.5.2"


[tool.poetry.group.dev.dependencies]
ipykernel = "^6.29.4"
pip-licenses = "^4.4.0"
ruff = "^0.4.2"
pre-commit = "^3.7.0"
pytest = "^8.2.0"
mypy = "^1.10.0"
types-setuptools = "^70.0.0.20240524"
types-pyyaml = "^6.0.12.20240311"
pytest-cov = "^5.0.0"
pytest-integration = "^0.2.3"
nbformat = ">=5.7"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
license-report = 'src.scripts.license_report:main'

[tool.ruff]
lint.select = ["ALL"]
line-length = 79
target-version = "py312"

lint.ignore = [
  "COM812",   # Trailing comma missing (formatter conflict)
  "ISC001",   # Implicitly concatenated string literals on one line	(formatter conflict)
  "ISC002",   # Implicitly concatenated string literals over multiple lines (formatter conflict)
  "D104",     # Missing docstring in public package
  "D100",     # Missing docstring in public module
  "D205",     # 1 blank line required between summary line and description
  "PLR0913",  # Too many arguments in function definition
  "ANN101",   # Missing type annotation for `self` in method
  "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed in `default`
]

exclude = [
  ".git",
  ".mypy_cache",
  ".nox",
  "build",
  "dist",
  ".eggs",
  "docs",
  "experiments",
  "preproject_work",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",     # Use of `assert` detected
    "PLR2004",  # Magic value used in comparison
    "INP001",   # Add an `__init__.py`
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.mypy]
ignore_missing_imports = true
files = [
  "src"
]


[tool.coverage.run]
branch = true

omit = [
  "tests/*"
]
